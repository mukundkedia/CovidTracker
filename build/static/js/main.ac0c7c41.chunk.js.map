{"version":3,"sources":["Components/Cards/Cards.module.css","Components/Cards/Cards.js","api/index.js","Components/Chart/Chart.js","Components/CountryPicker/CountryPicker.js","images/image.png","App.js","reportWebVitals.js","index.js","App.module.css","Components/Chart/Chart.module.css","Components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","country","active","carddetails","style","styles","infected","text","value","bottomText","className","container","Grid","spacing","justify","map","detail","index","item","component","Card","xs","md","cx","margin","padding","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","toLocaleTimeString","url","fetchData","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","lineChart","useState","setDailyData","useEffect","fetchAPI","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","hoverBackgroundColor","options","legend","display","title","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac0c7c41.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__GJT6r\",\"card\":\"Cards_card__1kjVn\",\"infected\":\"Cards_infected__1dFBu\",\"recovered\":\"Cards_recovered__3TGvL\",\"deaths\":\"Cards_deaths__20jsb\",\"active\":\"Cards_active__3hO55\"};","\r\nimport React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.css\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nconst Cards = ({\r\n  data: { confirmed, recovered, deaths, lastUpdate },\r\n  country,\r\n}) => {\r\n  if (!confirmed) {\r\n    return \"Loading...\";\r\n  }\r\n  const active = confirmed[\"value\"] - recovered[\"value\"] - deaths[\"value\"];\r\n  let carddetails = [\r\n    {\r\n      style: styles.infected,\r\n      text: \"Infected\",\r\n      value: confirmed.value,\r\n      bottomText: \"Number of infect cases of COVID-19\",\r\n    },\r\n    {\r\n      style: styles.recovered,\r\n      text: \"Recovered\",\r\n      value: recovered.value,\r\n      bottomText: \"Number of recoveries from COVID-19\",\r\n    },\r\n    {\r\n      style: styles.deaths,\r\n      text: \"Deaths\",\r\n      value: deaths.value,\r\n      bottomText: \"Number of deaths caused by COVID-19\",\r\n    },\r\n    {\r\n      style: styles.active,\r\n      text: \"Active\",\r\n      value: active,\r\n      bottomText: \"Number of active cases of COVID-19\",\r\n    },\r\n  ];\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        {carddetails.map((detail, index) => (\r\n          <Grid\r\n            item\r\n            component={Card}\r\n            xs={12}\r\n            md={2}\r\n            className={cx(styles.Card, detail.style)}\r\n            key={index}\r\n            style={{ margin: \"0px 23.675px\", padding: \"12px\" }}\r\n          >\r\n            <CardContent>\r\n              <Typography color=\"textPrimary\" gutterBottom>\r\n                <b>{detail.text}</b>\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp\r\n                  start={0}\r\n                  end={detail.value}\r\n                  duration={2}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textPrimary\">Last Updated at : </Typography>\r\n              <Typography color=\"textSecondary\" variant=\"body2\">\r\n                {new Date(lastUpdate).toDateString()}\r\n              </Typography>\r\n              <Typography color=\"textSecondary\" variant=\"body2\">\r\n                {new Date(lastUpdate).toLocaleTimeString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">{detail.bottomText}</Typography>\r\n              <Typography color=\"textPrimary\"> {country} </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeableUrl);\r\n\r\n    return {\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n      lastUpdate,\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {}\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  let lineChart;\r\n  const [dailyData, setDailyData] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n  if(dailyData){\r\n  lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255,0,0,0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n    }\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\", \"Active\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n              \"rgba(242, 234, 0, 0.5)\",\r\n            ],\r\n            hoverBackgroundColor: [\r\n              \"rgba(0, 77, 153)\",\r\n              \"rgba(30, 102, 49)\",\r\n              \"rgba(255, 51, 51)\",\r\n              \"rgba(204, 153, 0)\",\r\n            ],\r\n            data: [\r\n              confirmed.value,\r\n              recovered.value,\r\n              deaths.value,\r\n              confirmed.value - (recovered.value + deaths.value),\r\n            ],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n  );\r\n};\r\n\r\nexport default Chart;","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport styles from \"./CountryPicker.module.css\";\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n    fetchAPI();\r\n  }, [setFetchedCountries]);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect\r\n        defaultValue=\"\"\r\n        onChange={(e) => handleCountryChange(e.target.value)}\r\n      >\r\n        <option value=\"\">Global</option>\r\n        {fetchedCountries.map((country, key) => (\r\n          <option key={key} value={country}>\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","\r\nimport React from \"react\";\r\n// import { Cards, Chart, CountryPicker } from \"./Components\";\r\nimport Cards from './Components/Cards/Cards'\r\nimport Chart from './Components/Chart/Chart'\r\nimport CountryPicker from './Components/CountryPicker/CountryPicker'\r\nimport styles from \"./App.module.css\";\r\nimport { fetchData } from \"./api\";\r\nimport coronaImage from \"./images/image.png\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    data: {},\r\n    country: \"\",\r\n  };\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n    this.setState({ data: fetchedData });\r\n  }\r\n  handleCountryChange = async (country) => {\r\n    const fetchedData = await fetchData(country);\r\n    this.setState({ data: fetchedData, country: country });\r\n  };\r\n  render() {\r\n    const { data, country } = this.state;\r\n    return (\r\n      <div className={styles.container}>\r\n        <img className={styles.image} src={coronaImage} alt=\"COVID-19\" />\r\n        <br />\r\n        <text>\r\n          <b>Global and Country Wise Cases of Corona Virus</b>\r\n        </text>\r\n        <br />\r\n        <text>\r\n          <i>(For a particular select a Country from below)</i>\r\n        </text>\r\n        <br />\r\n        <br />\r\n        <Cards data={data} country={country} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Chart data={data} country={country} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2Ax59\",\"image\":\"App_image__2Orek\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2oWL_\",\"image\":\"Chart_image__6VIWC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3dC2O\"};"],"sourceRoot":""}